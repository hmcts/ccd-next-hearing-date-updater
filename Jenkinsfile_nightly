#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ccd"
def component = "next-hearing-date-updater"

def secrets = [
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
    secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
    secret('ccd-befta-caseworker-1-pwd', 'CCD_BEFTA_CASEWORKER_1_PWD'),
    secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD')
  ],
  's2s-${env}': [
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET'),
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP'),
    secret('microservicekey-ccd-definition', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DEFINITION'),
    secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DATA')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

env.CI_BUILD = true

withNightlyPipeline(type, product, component) {
  // Set required environment variables to run functional tests apart from one in vaults.
  env.ELASTIC_SEARCH_ENABLED = true
  env.IDAM_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
  env.ROLE_ASSIGNMENT_HOST = 'http://am-role-assignment-service-aat.service.core-compute-aat.internal'
  env.DOCUMENT_STORE_HOST = 'http://dm-store-aat.service.core-compute-aat.internal'
  env.DEFINITION_STORE_HOST = 'http://ccd-definition-store-api-aat.service.core-compute-aat.internal'
  env.Rules = params.SecurityRules

  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeployment()
  nonServiceApp()
  enableMutationTest()
  enableFullFunctionalTest()

  after('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  after('mutationTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  after('securityScan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  before('fullFunctionalTest') {
    echo "Loading the secrets"
    loadVaultSecrets(secrets)


    // Execute functional tests
    echo "Just waiting a while to ensure that the pod has run the job"
    sh "sleep 30s"
    echo "Verifying that functional test run correctly"
    try {
      echo "Before running func tests..."
      //builder.gradle('functional')
      builder.gradleWithOutput('functional')
      echo "After running func tests..."
    } finally {
      junit '**/test-results/**/*.xml'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**'
    }
  }
}
