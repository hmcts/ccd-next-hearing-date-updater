#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ccd"
def component = "next-hearing-date-updater"
def branchesToSync = ['demo','perftest']

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  'ccd-${env}': [
    secret('ccd-definition-s2s-secret', 'CCD_DEFINITION_STORE_S2S_SECRET'),
    secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET')
  ]
]

def prSecrets = [
  'ccd-aat': [
    secret('ccd-definition-s2s-secret', 'CCD_DEFINITION_STORE_S2S_SECRET'),
    secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

env.CI_BUILD = true
env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-ccd-next-hearing-date-updater-pr-${CHANGE_ID}.service.core-compute-preview.internal"
env.ELASTIC_SEARCH_DATA_NODES_HOSTS = "http://es-ccd-next-hearing-date-updater-pr-${CHANGE_ID}.service.core-compute-preview.internal"
env.ELASTIC_SEARCH_REQUEST_TIMEOUT = 6000
env.ELASTIC_SEARCH_CASES_INDEX_NAME_PATTERN = "%s_cases"

withPipeline(type, product, component) {
  after('test') {
    // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/pmd/*.html'
  }

  after('test') {
    builder.gradle('integration')
  }

  enableAksStagingDeployment()
  disableLegacyDeployment()
  nonServiceApp()
  syncBranchesWithMaster(branchesToSync)

  onPR() {
    echo "Loading PR secrets"
    loadVaultSecrets(prSecrets)
    env.ENV='preview'
  }

  onNonPR() {
    echo "Loading secrets"
    loadVaultSecrets(secrets)
    env.ENV='aat'
  }

//  // Check if the build should be wired to an environment higher than 'preview'.
//  if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc') {
//    environmentOfDependencies = env.BRANCH_NAME
//    // use aat environment for dependencies of master and CI/CD builds.
//    if (env.BRANCH_NAME.startsWith("PR") || env.BRANCH_NAME == 'master') {
//      environmentOfDependencies = "aat"
//    }
//    env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
//  }

  after('akschartsinstall') {
    // Set required environment variables to run functional tests apart from one in vaults.

    // Execute functional tests
    echo "Verifying that functional test run correctly"
    try {
      builder.gradle('functional')
    } finally {
      junit '**/test-results/**/*.xml'
    }
  }

  after('functionalTest:preview') {
    junit 'build/test-results/functional/**/*.xml'
    archiveArtifacts 'build/reports/tests/functional/index.html'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "ccd-next-hearing-date-updater Functional Test Report"
    ]
  }

  after('functionalTest:aat') {
    junit 'build/test-results/functional/**/*.xml'
    archiveArtifacts 'build/reports/tests/functional/index.html'

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "ccd-next-hearing-date-updater Functional Test Report"
    ]
  }
}
