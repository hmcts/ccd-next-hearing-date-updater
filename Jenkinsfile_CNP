#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder

properties([
  [
    $class       : 'GithubProjectProperty',
    displayName  : 'Next Hearing Date Updater',
    projectUrlStr: 'https://github.com/hmcts/ccd-next-hearing-date-updater'
  ],
  pipelineTriggers([
    [$class: 'GitHubPushTrigger']
  ]),
  disableConcurrentBuilds()
])

@Library("Infrastructure")

def type = "java"
def product = "ccd"
def component = "next-hearing-date-updater"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET'),
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP'),
//    secret('microservicekey-ccd-next-hearing-date-updater', 'IDAM_KEY_NEXT_HEARING_UPDATER')
  ],
  'ccd-${env}': [
    secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
    secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
    secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('ccd-befta-caseworker-1-pwd', 'CCD_BEFTA_CASEWORKER_1_PWD'),
    secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD'),
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
//    secret('idam-next-hearing-date-updater-system-user-username', 'IDAM_NEXT_HEARING_DATE_UPDATER_SYSTEM_USER'),
//    secret('idam-next-hearing-date-updater-system-user-password', 'IDAM_NEXT_HEARING_DATE_UPDATER_SYSTEM_PASSWORD'),
//    secret('idam-next-hearing-date-client-secret', 'CCD_NEXT_HEARING_DATE_UPDATER_SERVICE_IDAM_CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

env.CI_BUILD = true

// Other env variables needed for BEFTA.
env.IDAM_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.BEFTA_S2S_CLIENT_ID_OF_XUI_WEBAPP = "xui_webapp"
env.BEFTA_OAUTH2_CLIENT_ID_OF_XUIWEBAPP = "xuiwebapp"
env.BEFTA_OAUTH2_REDIRECT_URI_OF_XUIWEBAPP = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.BEFTA_OAUTH2_ACCESS_TOKEN_TYPE_OF_XUIWEBAPP = "OIDC"
env.BEFTA_OAUTH2_SCOPE_VARIABLES_OF_XUIWEBAPP = "profile openid roles manage-user create-user search-user"
// the below may not be needed
env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
env.CCD_API_GATEWAY_S2S_ID = "ccd_gw"

// temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  nonServiceApp()

  onPR {
    enableSlackNotifications('#ccd-pr-builds')
    env.ENV='preview'
    env.TEST_URL="https://ccd-data-store-api-ccd-next-hearing-date-updater-pr-${CHANGE_ID}.service.core-compute-preview.internal" // This is really not needed but here as a hack around TLS url
    env.CCD_DATA_STORE_API_URL = "https://ccd-data-store-api-ccd-next-hearing-date-updater-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-ccd-next-hearing-date-updater-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  }

  after('test') {

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "main.html",
      reportName           : "Next Hearing Date Updater Checkstyle Main Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "test.html",
      reportName           : "Next Hearing Date Updater Checkstyle Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/pmd",
      reportFiles          : "main.html",
      reportName           : "Next Hearing Date Updater PMD Main Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test",
      reportFiles          : "index.html",
      reportName           : "Next Hearing Date Updater Unit Tests Report"
    ]
  }
  after('akschartsinstall') {

    // for restful api deployments, the pipeline calls the `/health` in a loop until it gets SUCCESS or TIMEOUT
    // rough and dirty solution is this wait, as this is a nonServiceApp
    def sleepTime = (env.BRANCH_NAME.startsWith("PR")) ? '120s' : '90s'
    sh "sleep ${sleepTime}"

    try {
      sh "echo ========================== ENV VARS =========================="
      sh 'env'
      sh "echo =============================================================="
      builder.gradle('functional')
    } finally {
      junit '**/test-results/**/*.xml'
      junit 'build/test-results/functional/**/*.xml'
      archiveArtifacts 'build/reports/tests/functional/*.*'

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/functional",
        reportFiles          : "*.*",
        reportName           : "Next Hearing Date Updater Functional Test Report"
      ]
    }
//    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
  }

//  after('functionalTest:preview') {
//    publishHTML target: [
//      allowMissing         : true,
//      alwaysLinkToLastBuild: true,
//      keepAll              : true,
//      reportDir            : "build/reports/tests/functional",
//      reportFiles          : "*.*",
//      reportName           : "Next Hearing Date Updater Functional Test Report"
//    ]
//    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
//  }
//
//  after('functionalTest:aat') {
//
//    publishHTML target: [
//      allowMissing         : true,
//      alwaysLinkToLastBuild: true,
//      keepAll              : true,
//      reportDir            : "build/reports/tests/functional",
//      reportFiles          : "*.*",
//      reportName           : "Next Hearing Date Updater Functional Test Report"
//    ]
//    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
//  }

  syncBranchesWithMaster(['demo', 'perftest'])
}
