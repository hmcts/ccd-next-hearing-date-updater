plugins {
  id 'application'
  id 'idea'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.12.RELEASE'
  id 'org.springframework.boot' version '2.7.1'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.3'
  id 'uk.gov.hmcts.java' version '0.12.27'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.302'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  cftlibRuntimeClasspath.extendsFrom(runtimeClasspath)
}

idea {
  module {
    // config to allow Intellij to mark test source and resource files correctly to help linting tools
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

checkstyle {
  toolVersion '10.3.1'
}

tasks.withType(Checkstyle) {
  exclude '**/package-info.java'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  generateCucumberReports.enabled = false
  failFast = true
}

task functional(type: JavaExec) {
  dependsOn 'bootJar'

  doFirst {
    boolean ciBuild = System.getenv().get("CI_BUILD") ?: false
    if (!ciBuild) {
      delete "befta_recent_executions_info_LOCAL.json"

      file('.befta.local.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }

      // Override environment variables set by '.befta.local.env' above
      if (file('/tmp/.test.stub.service.env').exists()) {
        file('/tmp/.test.stub.service.env').readLines().each() {
          def (key, value) = it.tokenize('=')
          environment key, value
        }
      }
    }
  }

  description = "Runs functional tests"
  group = "Verification"

  generateCucumberReports.enabled = false
  mainClass = 'uk.gov.hmcts.reform.next.hearing.date.updater.befta.ServiceBeftaMain'
  classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
  args = [
    '--strict',
    '--threads', '10',
    '--plugin', "json:${rootDir}/target/cucumber.json",
    '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
    '--tags', 'not @Ignore',
    '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
  ]
  // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
  jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]

  finalizedBy {
    generateCucumberReports.enabled = true
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${buildDir}/reports/tests/functional"))
        logger.quiet("Functional test report moved to ---> file://${buildDir}/reports/tests/functional/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

cucumberReports {
  outputDir = file("${rootDir}/target/cucumber")
  reports = files("${rootDir}/target/cucumber.json")
}

task customCleanBeftaReports(type:Delete) {
  delete "${buildDir}/test-results/functional/"
  delete "${buildDir}/reports/tests/functional/"
  delete "${rootDir}/target/cucumber"
  delete "${rootDir}/target/cucumber.json"
}
tasks.clean.dependsOn(tasks.customCleanBeftaReports)

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.41.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ccd-next-hearing-date-updater"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-next-hearing-date-updater"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions",
      "src/main/java/uk/gov/hmcts/reform/next/hearing/date/updater/**/*.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  reformLogging = '6.0.1'
  lombokVersion = '1.18.24'
  jacksonVersion = '2.13.3'
  springFrameworkVersion = '5.3.22'
  cucumberVersion = '5.7.0'
  wiremockVersion = '2.33.2'
  elasticsearchVersion = '7.17.4'
  testcontainersVersion = '1.17.3'
}

dependencies {
  // Implementation dependencies
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework', name:'spring-webmvc', version: springFrameworkVersion

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.2'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.6.4'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.3'
  implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '2.0.1'

  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '9.3.1'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: 'v4.9.0_HMAN-319'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  // Unit test dependencies
  testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  // CFTLib
  cftlibImplementation group: 'org.testcontainers', name: 'testcontainers', version: testcontainersVersion

  cftlibTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  // Integration test dependencies
  integrationTestImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: wiremockVersion
  integrationTestImplementation group: 'org.elasticsearch', name: 'elasticsearch', version: elasticsearchVersion
  integrationTestImplementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: elasticsearchVersion
  integrationTestImplementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: elasticsearchVersion
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testcontainersVersion
  integrationTestImplementation group: 'org.testcontainers', name: 'elasticsearch', version: testcontainersVersion
  integrationTestImplementation group: 'com.pivovarit', name: 'throwing-function', version: '1.5.1'
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  // Functional test dependencies
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation sourceSets.integrationTest.runtimeClasspath
  functionalTestImplementation group: 'io.cucumber', name: 'cucumber-junit', version: cucumberVersion
  functionalTestImplementation group: 'io.cucumber', name: 'cucumber-java', version: cucumberVersion
  functionalTestImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.5'
  functionalTestImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.19.5_HMAN-368'
  functionalTestImplementation group: 'io.vavr', name: 'vavr', version: '0.10.4'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '4.4.0'
}

mainClassName = 'uk.gov.hmcts.reform.next.hearing.date.updater.ApplicationBootstrap'

bootJar {
  archiveFileName = "ccd-next-hearing-date-updater.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

bootWithCCD {
  doFirst {
    delete "befta_recent_executions_info_LOCAL.json"

    // Set this flag to 'true', if you want the CFTLib containers to be recreates each time
    environment "RSE_LIB_CLEAN_BOOT", false
  }

  authMode = uk.gov.hmcts.rse.AuthMode.Local
  environment("DATA_STORE_S2S_AUTHORISED_SERVICES", "ccd_gw,ccd_gateway,ccd_data,ccd_next_hearing_date_updater")
  environment("RSE_LIB_S2S_PORT", 4502)
}
